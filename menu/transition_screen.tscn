[gd_scene load_steps=4 format=2]

[ext_resource path="res://menu/transition_screen.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Credit: https://ddrkirby.com/articles/shader-based-transitions/shader-based-transitions.html

// An input into the shader from our game code.
// Ranges from 0 to 1 over the course of the transition.
// We use this to actually animate the shader.
uniform float progress : hint_range(0, 1) = 0;

// Size of each diamond, in pixels.
uniform float diamondPixelSize = 30.0;

uniform bool isAppearing = true;

void fragment() {
	float diamondSize = diamondPixelSize * ((1.0/SCREEN_PIXEL_SIZE.r)/640.0);
    float xFraction = fract(FRAGCOORD.x / diamondSize);
    float yFraction = fract(FRAGCOORD.y / diamondSize);
    
    float xDistance = abs(xFraction - 0.5);
    float yDistance = abs(yFraction - 0.5);
    
    if (isAppearing && (xDistance + yDistance + UV.x + UV.y > progress * 4.0)) {
        discard;
    }
	
	if (!isAppearing && (xDistance + yDistance + UV.x + UV.y < progress * 4.0)) {
        discard;
    }
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/progress = 0.0
shader_param/diamondPixelSize = 30.0
shader_param/isAppearing = true

[node name="TransitionScreen" type="Node2D"]
pause_mode = 2
script = ExtResource( 1 )
__meta__ = {
"_editor_description_": ""
}

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 5
__meta__ = {
"_editor_description_": ""
}

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 2 )
margin_right = 640.0
margin_bottom = 360.0
color = Color( 0, 0, 0, 1 )
